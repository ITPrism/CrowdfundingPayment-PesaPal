<?php
/**
 * @package      Crowdfunding
 * @subpackage   Plugins
 * @author       Todor Iliev
 * @copyright    Copyright (C) 2016 Todor Iliev <todor@itprism.com>. All rights reserved.
 * @license      GNU General Public License version 3 or later; see LICENSE.txt
 */

// no direct access
defined('_JEXEC') or die;

jimport('Prism.init');
jimport('Crowdfunding.init');
jimport('Emailtemplates.init');
jimport('Prism.libs.PesaPal.OAuth');

/**
 * Crowdfunding PesaPal payment plugin.
 *
 * @package      Crowdfunding
 * @subpackage   Plugins
 */
class plgCrowdfundingPaymentPesapal extends Crowdfunding\Payment\Plugin
{
    public function __construct(&$subject, $config = array())
    {
        parent::__construct($subject, $config);

        $this->serviceProvider = 'PesaPal';
        $this->serviceAlias    = 'pesapal';
        $this->textPrefix     .= '_' . \JString::strtoupper($this->serviceAlias);
        $this->debugType      .= '_' . \JString::strtoupper($this->serviceAlias);
        $this->errorType      .= '_' . \JString::strtoupper($this->serviceAlias);
    }

    /**
     * This method prepares a payment gateway - buttons, forms,...
     * That gateway will be displayed on the summary page as a payment option.
     *
     * @param string                   $context This string gives information about that where it has been executed the trigger.
     * @param stdClass                 $item    A project data.
     * @param Joomla\Registry\Registry $params  The parameters of the component
     *
     * @return string
     */
    public function onProjectPayment($context, &$item, &$params)
    {
        if (strcmp('com_crowdfunding.payment', $context) !== 0) {
            return null;
        }

        if ($this->app->isAdmin()) {
            return null;
        }

        $doc = JFactory::getDocument();
        /**  @var $doc JDocumentHtml */

        // Check document type
        $docType = $doc->getType();
        if (strcmp('html', $docType) !== 0) {
            return null;
        }

        $html   = array();
        $html[] = '<div class="well">';

        $html[] = '<img src="plugins/crowdfundingpayment/pesapal/images/pesapal_icon.png" width="190" height="80" alt="' . JText::_($this->textPrefix . '_TITLE') . '" />';

        // Prepare payment receiver.
        $consumerKey    = JString::trim($this->params->get('consumer_key'));
        $consumerSecret = JString::trim($this->params->get('consumer_secret'));
        if (!$consumerKey or !$consumerSecret) {
            $html[] = $this->generateSystemMessage(JText::_($this->textPrefix . '_ERROR_NOT_CONFIGURED'));

            return implode("\n", $html);
        }

        // Get payment session
        $userStateContext = Crowdfunding\Constants::PAYMENT_SESSION_CONTEXT . $item->id;
        $userState        = $this->app->getUserState($userStateContext);

        $paymentSession = $this->getPaymentSession(array(
            'session_id' => $userState->session_id
        ));

        // Prepare user data.
        $userData = $this->getUserData($paymentSession);

        // DEBUG DATA
        JDEBUG ? $this->log->add(JText::_($this->textPrefix . '_DEBUG_USER_DATA'), $this->debugType, $userData) : null;

        if (!$userData['email']) {
            $html[] = $this->generateSystemMessage(JText::_($this->textPrefix . '_ERROR_REQUIRES_EMAIL'));

            return implode("\n", $html);
        }

        // Display additional information.
        $html[] = '<p>' . JText::_($this->textPrefix . '_INFO') . '</p>';

        // Generate order ID and store it to the payment session.
        $orderId = JString::strtoupper(Prism\Utilities\StringHelper::generateRandomString(16, 'PP'));

        $amount    = number_format($item->amount, 2); //format amount to 2 decimal places
        $desc      = JText::sprintf($this->textPrefix . '_INVESTING_IN_S', $item->title);
        $type      = 'MERCHANT'; //default value = MERCHANT
        $reference = $orderId; //unique order id of the transaction, generated by merchant
        $firstName = $userData['first_name']; //[optional]
        $lastName  = $userData['last_name']; //[optional]
        $email     = $userData['email'];

        $postXml = '<?xml version="1.0" encoding="utf-8"?><PesapalDirectOrderInfo xmlns:xsi="http://www.w3.org/2001/XMLSchemainstance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" Amount="' . $amount . '" Description="' . $desc . '" Type="' . $type . '" Reference="' . $reference . '" FirstName="' . $firstName . '" LastName="' . $lastName . '" Email="' . $email . '" xmlns="http://www.pesapal.com" />';

        // Store data in payment session.
        $paymentSession->setOrderId($orderId);
        $paymentSession->setData('pesapal.amount', $amount);
        $paymentSession->setData('pesapal.currency_code', $item->currencyCode);
        $paymentSession->store();

        // DEBUG DATA
        JDEBUG ? $this->log->add(JText::_($this->textPrefix . '_DEBUG_POST_XML'), $this->debugType, $postXml) : null;

        $postXml = htmlentities($postXml);

        $signatureMethod = new OAuthSignatureMethod_HMAC_SHA1();
        $consumer        = new OAuthConsumer($this->params->get('consumer_key'), $this->params->get('consumer_secret'));
        $token           = null;
        $pesaPalParams   = null;

        $iframeUrl   = ($this->params->get('test_enabled', 1)) ? $this->params->get('test_merchant_url') : $this->params->get('merchant_url');
        $callbackUrl = $this->getReturnUrl($item->slug, $item->catslug) . '&pid='. (int)$item->id;

        // DEBUG DATA
        JDEBUG ? $this->log->add(JText::_($this->textPrefix . '_DEBUG_IFRAME_URL'), $this->debugType, $iframeUrl) : null;
        JDEBUG ? $this->log->add(JText::_($this->textPrefix . '_DEBUG_CALLBACK_URL'), $this->debugType, $callbackUrl) : null;

        //post transaction to pesapal
        $iframeSrc = OAuthRequest::from_consumer_and_token($consumer, $token, 'GET', $iframeUrl, $pesaPalParams);
        $iframeSrc->set_parameter('oauth_callback', $callbackUrl);
        $iframeSrc->set_parameter('pesapal_request_data', $postXml);
        $iframeSrc->sign_request($signatureMethod, $consumer, $token);

        // Start the form.
        $html[] = '<iframe src="' . $iframeSrc . '" width="100%" height="720px" scrolling="auto" frameBorder="0"> <p>' . JText::_('PLG_CROWDFUNDINGPAYMENT_PESAPAL_ERROR_UNABLE_TO_LOAD') . '</p> </iframe>';

        $html[] = '</div>';

        return implode("\n", $html);
    }

    /**
     * Prepare user data.
     *
     * @param Crowdfunding\Payment\Session $paymentSession
     *
     * @return array
     */
    protected function getUserData($paymentSession)
    {
        $result = array(
            'first_name' => '',
            'last_name'  => '',
            'email'      => ''
        );

        $user = JFactory::getUser();
        if (!$user->get('id')) {

            // Get name and email from anonymous data records.
            if ($paymentSession->isAnonymous() and JComponentHelper::isEnabled('com_crowdfundingdata')) {
                $user = new Crowdfundingdata\Record(JFactory::getDbo());
                $user->load(array('session_id' => $paymentSession->getAnonymousUserId()));
                if ($user->getId()) {

                    $userNames            = explode(' ', $user->getName());
                    $result['first_name'] = Joomla\Utilities\ArrayHelper::getValue($userNames, 0, '', 'string');
                    $result['last_name']  = Joomla\Utilities\ArrayHelper::getValue($userNames, 1, '', 'string');

                    $result['email'] = $user->getEmail();
                }
            }

        } else {
            $userNames = explode(' ', $user->get('name'));

            $result['first_name'] = Joomla\Utilities\ArrayHelper::getValue($userNames, 0, '', 'string');
            $result['last_name']  = Joomla\Utilities\ArrayHelper::getValue($userNames, 1, '', 'string');
            $result['email']      = $user->get('email');
        }

        return $result;
    }

    /**
     * This method processes transaction data that comes from PayPal instant notifier.
     *
     * @param string                   $context This string gives information about that where it has been executed the trigger.
     * @param Joomla\Registry\Registry $params  The parameters of the component
     *
     * @return null|array
     */
    public function onPaymentNotify($context, &$params)
    {
        if (strcmp('com_crowdfunding.notify.' . $this->serviceAlias, $context) !== 0) {
            return null;
        }

        if ($this->app->isAdmin()) {
            return null;
        }

        $doc = JFactory::getDocument();
        /**  @var $doc JDocumentHtml */

        // Check document type
        $docType = $doc->getType();
        if (strcmp('raw', $docType) !== 0) {
            return null;
        }

        // Validate request method
        $requestMethod = $this->app->input->getMethod();
        if (strcmp('GET', $requestMethod) !== 0) {
            $this->log->add(
                JText::_($this->textPrefix . '_ERROR_INVALID_REQUEST_METHOD'),
                $this->debugType,
                JText::sprintf($this->textPrefix . '_ERROR_INVALID_TRANSACTION_REQUEST_METHOD', $requestMethod)
            );

            return null;
        }

        // DEBUG DATA
        JDEBUG ? $this->log->add(JText::_($this->textPrefix . '_DEBUG_GET_RESPONSE'), $this->debugType, $_GET) : null;

        // Prepare the array that have to be returned by this method.
        $result = array(
            'project'          => null,
            'reward'           => null,
            'transaction'      => null,
            'payment_session'  => null,
            'service_provider' => $this->serviceProvider,
            'service_alias'    => $this->serviceAlias,
            'response'         => null
        );

        // Parameters sent to you by PesaPal IPN
        $pesapalNotification = $this->app->input->get->get('pesapal_notification_type');
        $pesapalTrackingId   = $this->app->input->get->get('pesapal_transaction_tracking_id', '', 'raw');
        $pesapalOrderId      = $this->app->input->get->get('pesapal_merchant_reference');

        // Get the status data from PesaPal server.
        $data = null;
        if (strcmp($pesapalNotification, 'CHANGE') === 0 and $pesapalTrackingId !== '') {
            $data = $this->getStatusData($pesapalOrderId, $pesapalTrackingId);
        }

        // DEBUG DATA
        JDEBUG ? $this->log->add(JText::_($this->textPrefix . '_DEBUG_DATA'), $this->debugType, $data) : null;

        if ($data !== null) {

            // Get currency
            $currency = Crowdfunding\Currency::getInstance(JFactory::getDbo(), $params->get('project_currency'));

            // Get payment session data
            $paymentSession = $this->getPaymentSession(array(
                'unique_key' => $pesapalTrackingId,
                'order_id'   => $pesapalOrderId
            ));

            // DEBUG DATA
            JDEBUG ? $this->log->add(JText::_($this->textPrefix . '_DEBUG_PAYMENT_SESSION'), $this->debugType, $paymentSession->getProperties()) : null;

            if ($pesapalOrderId !== $paymentSession->getOrderId()) {
                $this->log->add(
                    JText::_($this->textPrefix . '_ERROR_INVALID_ORDER_ID'),
                    $this->debugType,
                    $pesapalOrderId
                );

                return $result;
            }

            // Prepare valid transaction data.
            $options = array(
                'currency_code' => $currency->getCode(),
                'timezone'      => $this->app->get('offset'),
            );

            $validData = $this->validateData($data, $paymentSession, $options);
            if ($validData === null) {
                return $result;
            }

            // DEBUG DATA
            JDEBUG ? $this->log->add(JText::_($this->textPrefix . '_DEBUG_VALID_DATA'), $this->debugType, $validData) : null;

            // Get project.
            $projectId = Joomla\Utilities\ArrayHelper::getValue($validData, 'project_id');
            $project   = new Crowdfunding\Project(JFactory::getDbo());
            $project->load($projectId);

            // DEBUG DATA
            JDEBUG ? $this->log->add(JText::_($this->textPrefix . '_DEBUG_PROJECT_OBJECT'), $this->debugType, $project->getProperties()) : null;

            // Check for valid project
            if (!$project->getId()) {

                // Log data in the database
                $this->log->add(
                    JText::_($this->textPrefix . '_ERROR_INVALID_PROJECT'),
                    $this->debugType,
                    $validData
                );

                return $result;
            }

            // Set the receiver of funds.
            $validData['receiver_id'] = $project->getUserId();

            $transactionData   = null;
            $reward            = null;

            // Start database transaction.
            $db = JFactory::getDbo();
            $db->transactionStart();

            try {
                // Save transaction data.
                // If it is not completed, return empty results.
                // If it is complete, continue with process transaction data
                $transactionData = $this->storeTransaction($validData, $project);
                if ($transactionData === null) {
                    $db->transactionCommit();
                    return $result;
                }

                // Update the number of distributed reward.
                $rewardId = Joomla\Utilities\ArrayHelper::getValue($transactionData, 'reward_id', 0, 'int');
                if ($rewardId > 0) {
                    $reward = $this->updateReward($transactionData);

                    // Validate the reward.
                    if (!$reward) {
                        $transactionData['reward_id'] = 0;
                    }
                }

                $db->transactionCommit();

            } catch (Exception $e) {
                $db->transactionRollback();
                return $result;
            }

            // Generate object of data, based on the transaction properties.
            $result['transaction'] = Joomla\Utilities\ArrayHelper::toObject($transactionData);

            // Generate object of data based on the project properties.
            $properties        = $project->getProperties();
            $result['project'] = Joomla\Utilities\ArrayHelper::toObject($properties);

            // Generate object of data based on the reward properties.
            if ($reward !== null and ($reward instanceof Crowdfunding\Reward)) {
                $properties       = $reward->getProperties();
                $result['reward'] = Joomla\Utilities\ArrayHelper::toObject($properties);
            }

            // Generate data object, based on the payment session properties.
            $properties                = $paymentSession->getProperties();
            $result['payment_session'] = Joomla\Utilities\ArrayHelper::toObject($properties);

            // DEBUG DATA
            JDEBUG ? $this->log->add(JText::_($this->textPrefix . '_DEBUG_RESULT_DATA'), $this->debugType, $result) : null;

            // If transaction is COMPLETED.

            // Close payment session and remove intention.
            $removeIntention = false;
            $txnStatus       = (isset($result['transaction']->txn_status)) ? $result['transaction']->txn_status : null;
            if (strcmp('completed', $txnStatus) === 0) {
                $removeIntention = true;

                // Send response to PesaPal server.
                $result['response'] = 'pesapal_notification_type='.$pesapalNotification.'&pesapal_transaction_tracking_id='.$pesapalTrackingId.'&pesapal_merchant_reference='.$pesapalOrderId;
            }

            $this->closePaymentSession($paymentSession, $removeIntention);
        }

        return $result;
    }

    protected function getStatusData($orderId, $trackingId)
    {
        // Prepare payment receiver.
        $consumerKey    = JString::trim($this->params->get('consumer_key'));
        $consumerSecret = JString::trim($this->params->get('consumer_secret'));
        if (!$consumerKey or !$consumerSecret) {
            $this->log->add(JText::_($this->textPrefix . '_ERROR_INVALID_CREDENTIALS'), $this->errorType);
            return null;
        }

        $apiUrl           = $this->params->get('test_enabled', 1) ? 'https://demo.pesapal.com/api' : 'https://www.pesapal.com/api';

        $token            = null;
        $consumer         = new OAuthConsumer($consumerKey, $consumerSecret);
        $signature_method = new OAuthSignatureMethod_HMAC_SHA1();

        //get transaction status
        $requestStatus = OAuthRequest::from_consumer_and_token($consumer, $token, 'GET', $apiUrl . '/QueryPaymentStatus', null);
        $requestStatus->set_parameter('pesapal_merchant_reference', $orderId);
        $requestStatus->set_parameter('pesapal_transaction_tracking_id', $trackingId);
        $requestStatus->sign_request($signature_method, $consumer, $token);

        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $requestStatus);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_HEADER, 1);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);

        if (defined('CURL_PROXY_REQUIRED') and CURL_PROXY_REQUIRED === 'True') {
            $proxy_tunnel_flag = (defined('CURL_PROXY_TUNNEL_FLAG') and strtoupper(CURL_PROXY_TUNNEL_FLAG) === 'FALSE') ? false : true;
            curl_setopt($ch, CURLOPT_HTTPPROXYTUNNEL, $proxy_tunnel_flag);
            curl_setopt($ch, CURLOPT_PROXYTYPE, CURLPROXY_HTTP);

            if (defined('CURL_PROXY_SERVER_DETAILS')) {
                curl_setopt($ch, CURLOPT_PROXY, CURL_PROXY_SERVER_DETAILS);
            }
        }

        $response = curl_exec($ch);

        // DEBUG DATA
        JDEBUG ? $this->log->add(JText::_($this->textPrefix . '_DEBUG_RESPONSE'), $this->debugType, $response) : null;

        $header_size = curl_getinfo($ch, CURLINFO_HEADER_SIZE);
//        $raw_header  = substr($response, 0, $header_size - 4);
//        $headerArray = explode("\r\n\r\n", $raw_header);
//        $header      = $headerArray[count($headerArray) - 1];

        // Transaction status
        $elements = preg_split('/=/', substr($response, $header_size));

        curl_close($ch);

        return array('status' => $elements[1]);
    }

    /**
     * Complete checkout.
     *
     * @param string                   $context
     * @param stdClass                 $item
     * @param Joomla\Registry\Registry $params
     *
     * @return array|null
     */
    public function onPaymentsCompleteCheckout($context, &$item, &$params)
    {
        JDEBUG ? $this->log->add('context', $this->debugType, $context) : null;

        if (strcmp('com_crowdfunding.payments.completecheckout.' . $this->serviceAlias, $context) !== 0) {
            return null;
        }

        if ($this->app->isAdmin()) {
            return null;
        }

        $doc = JFactory::getDocument();
        /**  @var $doc JDocumentHtml */

        // Check document type
        $docType = $doc->getType();
        if (strcmp('html', $docType) !== 0) {
            return null;
        }

        // DEBUG DATA
        JDEBUG ? $this->log->add(JText::_($this->textPrefix . '_DEBUG_CALLBACK_RESPONSE'), $this->debugType, $_GET) : null;

        // Get payment session
        $userStateContext = Crowdfunding\Constants::PAYMENT_SESSION_CONTEXT . $item->id;
        $userState        = $this->app->getUserState($userStateContext);

        $paymentSession = $this->getPaymentSession(array(
            'session_id' => $userState->session_id
        ));

        $orderId    = $this->app->input->get->get('pesapal_merchant_reference', null, 'string');
        $trackingId = $this->app->input->get->get('pesapal_transaction_tracking_id', null, 'raw');

        // Store tracking ID.
        if (($orderId !== null and $trackingId !== null) and ($orderId === $paymentSession->getOrderId())) {
            $paymentSession->setUniqueKey($trackingId);
            $paymentSession->storeUniqueKey();
        }

        return array(
            'redirect_url' => JRoute::_(CrowdfundingHelperRoute::getBackingRoute($item->slug, $item->catslug, 'share'))
        );
    }

    /**
     * Validate PayPal transaction.
     *
     * @param array                        $data
     * @param Crowdfunding\Payment\Session $paymentSession
     * @param array                        $options
     *
     * @return array
     */
    protected function validateData($data, $paymentSession, $options)
    {
        $date      = new JDate('now', $options['timezone']);

        $txnStatus = JString::strtolower(Joomla\Utilities\ArrayHelper::getValue($data, 'status', '', 'string'));
        $txnStatus = ($txnStatus === 'invalid') ? 'failed' : $txnStatus;

        // Prepare transaction data
        $transaction = array(
            'investor_id'      => (int)$paymentSession->getUserId(),
            'project_id'       => (int)$paymentSession->getProjectId(),
            'reward_id'        => ($paymentSession->isAnonymous()) ? 0 : (int)$paymentSession->getRewardId(),
            'service_provider' => $this->serviceProvider,
            'service_alias'    => $this->serviceAlias,
            'txn_id'           => $paymentSession->getOrderId(),
            'txn_amount'       => $paymentSession->getData('pesapal.amount'),
            'txn_currency'     => $paymentSession->getData('pesapal.currency_code'),
            'txn_status'       => $txnStatus,
            'txn_date'         => $date->toSql()
        );

        // Check Project ID and Transaction ID
        if (!$transaction['project_id'] or !$transaction['txn_id']) {

            // Log data in the database
            $this->log->add(
                JText::_($this->textPrefix . '_ERROR_INVALID_TRANSACTION_DATA'),
                $this->debugType,
                $transaction
            );

            return null;
        }

        // Check currency
        if (strcmp($transaction['txn_currency'], $options['currency_code']) !== 0) {

            // Log data in the database
            $this->log->add(
                JText::_($this->textPrefix . '_ERROR_INVALID_TRANSACTION_CURRENCY'),
                $this->debugType,
                array('TRANSACTION DATA' => $transaction, 'CURRENCY' => $options['currency_code'])
            );

            return null;
        }

        return $transaction;
    }

    /**
     * Save transaction data.
     *
     * @param array                $transactionData
     * @param Crowdfunding\Project $project
     *
     * @return null|array
     */
    protected function storeTransaction($transactionData, $project)
    {
        // Get transaction by txn ID
        $keys        = array(
            'txn_id' => Joomla\Utilities\ArrayHelper::getValue($transactionData, 'txn_id')
        );
        $transaction = new Crowdfunding\Transaction(JFactory::getDbo());
        $transaction->load($keys);

        // DEBUG DATA
        JDEBUG ? $this->log->add(JText::_($this->textPrefix . '_DEBUG_TRANSACTION_OBJECT'), $this->debugType, $transaction->getProperties()) : null;

        // Check for existed transaction
        // If the current status if completed, stop the payment process.
        if ($transaction->getId() and $transaction->isCompleted()) {
            return null;
        }

        // Add extra data.
        if (array_key_exists('extra_data', $transactionData)) {
            if (!empty($transactionData['extra_data'])) {
                $transaction->addExtraData($transactionData['extra_data']);
            }

            unset($transactionData['extra_data']);
        }

        // Store the new transaction data.
        $transaction->bind($transactionData);
        $transaction->store();

        // If it is not completed (it might be pending or other status),
        // stop the process. Only completed transaction will continue
        // and will process the project, rewards,...
        if (!$transaction->isCompleted()) {
            return null;
        }

        // Set transaction ID.
        $transactionData['id'] = $transaction->getId();

        // If the new transaction is completed,
        // update project funded amount.
        $amount = Joomla\Utilities\ArrayHelper::getValue($transactionData, 'txn_amount');
        $project->addFunds($amount);
        $project->storeFunds();

        return $transactionData;
    }
}
